@rendermode InteractiveAuto
@using PersonalDeskThing.App.Client.Components.MusicPlayerComponents
@if(playingSong == null)
{
    <h4>No song is playing</h4>
    return;
}

<MudContainer>
    <MudGrid Justify="Justify.Center">
        <MudItem md="12" xl="6" xxl="6">
            <MudPaper Class="align-center justify-center">
                <MudGrid Justify="Justify.Center" Class="align-center justify-center mud-width-full">
                    <MudItem md="6" Class="d-flex align-center justify-center mud-width-full">
                        <AlbumCover ImageUrl="@playingSong.ImageUrl"/>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="6">
                        <SongInfo PlayingSong="@playingSong"/>
                        <Controls Player="@Player" IsPlaying="@playingSong.IsPlaying" />
                    </MudItem>
                </MudGrid>
                <NextSongPopover Player="@Player" PlayingSong="@playingSong" />
            </MudPaper>
            <ProgressBar Song="@playingSong" OnSongFinished="updateData" />
        </MudItem>
    </MudGrid>
</MudContainer>


@code {
    [Parameter]
    public required IMusicPlayer Player { get; set; }
    PlayingSong? playingSong;
    static System.Timers.Timer _refreshDataTimer = null!;
    

    protected override async Task OnInitializedAsync()
    {
        await updateData();

        _refreshDataTimer = new System.Timers.Timer(10000);
        _refreshDataTimer.Elapsed += async (sender, e) => await updateData();
        _refreshDataTimer.Enabled = true;

        Player.OnSongUpdated += async(sender,e) => await updateData();
    }
    
    async Task updateData()
    {
        var newSong = await Player.GetCurrentSong();

        if (newSong == null)
        {
            return;
        }

        playingSong = newSong;

        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
    
    public void Dispose()
    {
        _refreshDataTimer?.Dispose();
    }
}
